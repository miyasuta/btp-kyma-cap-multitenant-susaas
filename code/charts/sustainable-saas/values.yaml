global:
  imagePullSecret: {}
  domain: c-209d1ec.kyma.ondemand.com # see domain in Config Map kube-system/shoot-info or custom domain (e.g. sap-demo.com) 
  shootName: c-209d1ec # see shootName in Config Map kube-system/shoot-info
  gateway: # use default value (kyma-system/kyma-gateway) or custom gateway (e.g. susaas/demo-gateway)
  # If necessary, override essential dependencies required in subcharts
  # Required in case you e.g., provide a fullNameOverride or a custom exposed host
  api:
    fullName:  # leave empty to apply default logic - $Release.Name-api (e.g. susaas-api)
    deploymentHost: # leave empty to apply default logic - $Release.Name-api-$Release.Namespace (e.g. susaas-api-default)
  broker:
    fullName:  # leave empty to apply default logic - $Release.Name-broker (e.g. susaas-broker)
    deploymentHost:  # leave empty to apply default - $Release.Name-broker-$Release.Namespace (e.g. susaas-broker-default)
  router:
    name: # leave empty to apply default logic - router (e.g. router)
    fullName: # leave empty to apply default logic - $Release.Name-router (e.g. susaas-router)
    deploymentHost: # leave empty to apply default logic - $Release.Name-router-$Release.Namespace (e.g. susaas-router-default)
    port: # leave empty to apply default value - 5000


# Application Router Workload
router:
  bindings:
    xsuaa:
      serviceInstanceName: xsuaa
    destination:
      serviceInstanceName: destination
    html5-apps-repo:
      serviceInstanceName: html5-repo-runtime
  image:
    # Provide your Application Router Docker Image repository
    repository: miyasuta/susaas-router
    tag: latest
  resources:
    limits:
      ephemeral-storage: 1G
      memory: 500M
      cpu: 300m
    requests:
      ephemeral-storage: 1G
      cpu: 300m
      memory: 500M


# Backend Service Workload
srv:
  port: 8080
  bindings:
    xsuaa:
      serviceInstanceName: xsuaa
    sm-container:
      serviceInstanceName: sm-container
    sm-admin:
      serviceInstanceName: sm-admin
    saas-registry:
      serviceInstanceName: saas-registry
    destination: 
      serviceInstanceName: destination
    hana: 
      serviceInstanceName: com-hdi-container
    html5-apps-repo:
      serviceInstanceName: html5-repo-runtime
    alert-notification:
      # Only enable if Alert Notification Service instance is available in namespace
      enabled: true
      # As Alert Notification is unique per namespace, serviceInstanceFullname is used
      serviceInstanceFullname: alert-notification
    identity:
      # Only enable if Cloud Identity Service instance is enabled in Umbrella Chart 
      enabled: false 
      serviceInstanceName: identity
      # SAP IAS binding requires X.509 certificate based credentials
      parameters:
        credential-type: X509_GENERATED
      credentialsRotationPolicy:
        enabled: true
        rotatedBindingTTL: 1h
        rotationFrequency: 24h
  image:
    # Provide your Backend Service Docker Image repository
    repository: miyasuta/susaas-srv
    tag: latest
  resources:
    limits:
      ephemeral-storage: 1G
      memory: 500M
    requests:
      ephemeral-storage: 1G
      cpu: 500m
      memory: 500M


# SaaS API Workload
api:
  bindings:
    xsuaa-api:
      serviceInstanceName: xsuaa-api
    sm-container:
      serviceInstanceName: sm-container
  # Service Key required for secure SAP API Management integration
  serviceKeys:
    xsuaa-apim:
      serviceInstanceName: xsuaa-api
  image:
    # Provide your API Service Docker Image repository
    repository: miyasuta/susaas-api
    tag: latest
  # Settings for SAP API Management integration
  apim:
    # Only enable if SAP API Management instance is configured
    enabled: false
    # SAP API Management runtime host w/o "https://" or port
    host: sap-demo.prod.apimanagement.eu10.hana.ondemand.com
    # Port of SAP API Management runtime host
    port: 443
    # Path of API Proxy in SAP API Management
    path: susaas-api
    # Provide details of the API XSUAA Service Instance
    # Those details can be found in the respective Kyma Secret
    # The Secret is created for the xsuaa-apim serviceKey
    xsuaa: 
      # Provide the XSUAA tenant host without https://
      # e.g., sap-demo.authentication.us20.hana.ondemand.com
      host: sap-demo.authentication.us20.hana.ondemand.com
      # Provide the xsappname of your API XSUAA Service Instance 
      # Add the prefix "sb-" to the xsappname like, sb-susaas-api-default
      sub: sb-susaas-api-default
  resources:
    limits:
      ephemeral-storage: 1G
      memory: 500M
      cpu: 200m
    requests:
      ephemeral-storage: 1G
      cpu: 200m
      memory: 500M


# API Service Broker Workload
broker:
  bindings:
    xsuaa-api:
      serviceInstanceName: xsuaa-api
  image:
    # Provide your API Service Broker Docker Image repository
    repository: miyasuta/susaas-broker
    tag: latest
  resources:
    limits:
      ephemeral-storage: 1G
      memory: 500M
      cpu: 150m
    requests:
      ephemeral-storage: 1G
      cpu: 100m
      memory: 500M
  config: 
    # Leave empty to generate new ID on Helm installation
    # ! Should be static in productive scenarios !
    serviceId: 
    displayName: Sustainable SaaS API
    plans:
      - name: default
        description: Standard Plan
        # Leave empty to generate new ID on Helm installation
        # ! Should be static in productive scenarios !
        planId:  
      - name: premium
        description: Premium Plan
        # Leave empty to generate new ID on Helm installation
        # ! Should be static in productive scenarios !
        planId:
      - name: trial
        description: Trial Plan
        # Leave empty to generate new ID on Helm installation
        # ! Should be static in productive scenarios !
        planId:


# Shared Database Container Deployer Job
# Deploys the shared data model to a database container
hana_deployer:
  image:
    # Provide your HDI Container Deployer Docker Image repository
    repository: miyasuta/susaas-db-com
    tag: latest
  bindings:
    hana:
      serviceInstanceName: com-hdi-container
  resources:
    limits:
      cpu: 500m
      memory: 1G
    requests:
      cpu: 500m
      memory: 1G


# HTML5 Apps Deployer Job
# Deploys the UI modules to the HTML5 App Repository
html5_apps_deployer:
  cloudService: susaas
  image:
    # Provide your HTML5 Apps Deployer Docker Image repository
    repository: miyasuta/susaas-html5-deployer
    tag: latest
  bindings:
    html5-apps-repo:
      serviceInstanceName: html5-repo-host
  resources:
    limits:
      cpu: 500m
      memory: 500M
    requests:
      cpu: 300m
      memory: 500M


# SAP XSUAA Instance (for SaaS Application)
# XSUAA instance for SaaS application based on application service plan
xsuaa:
  serviceOfferingName: xsuaa
  servicePlanName: application
  parameters:
    # xsappname has to be unique in the same subaccount
    xsappname: '{{.Release.Name}}-{{.Release.Namespace}}'
    tenant-mode: shared
    # Role collections names have to be unique in the same subaccount
    # Therefore a unique identifer has to be utilized 
    role-collections:
      - name: 'Susaas Member ({{.Release.Name}}-{{.Release.Namespace}})'
        description: Member Access
        role-template-references: 
          - '$XSAPPNAME.Member'
          - '$XSAPPNAME.Token_Exchange'
      - name: 'Susaas Administrator ({{.Release.Name}}-{{.Release.Namespace}})'
        description: Administrator Access
        role-template-references: 
          - '$XSAPPNAME.Admin'
          - '$XSAPPNAME.SaaSAdmin'
          - '$XSAPPNAME.UserManagementAdmin'
          - '$XSAPPNAME.Token_Exchange'
      - name: 'Susaas Extension Developer ({{.Release.Name}}-{{.Release.Namespace}})'
        description: Extension Developer Access
        role-template-references: 
          - '$XSAPPNAME.ExtensionDeveloper'
          - '$XSAPPNAME.Token_Exchange'
  # Rest of the configuration settings (Scopes, Role Templates) in json file
  config: xs-security.json


# SAP XSUAA Instance (for SaaS API)
# XSUAA instance for SaaS API based on broker service plan
xsuaa_api:
  serviceOfferingName: xsuaa
  servicePlanName: broker
  parameters:
    # xsappname has to be unique in the same subaccount
    xsappname: '{{.Release.Name}}-api-{{.Release.Namespace}}'
    scopes:
      - description: Default Plan
        name: $XSAPPNAME.plan_default
      - description: Trial Plan
        name: $XSAPPNAME.trial_default
      - description: Premium Plan
        name: $XSAPPNAME.plan_premium
  

# SAP Software-as-a-Service Registry
# Required to connect SaaS application with SAP BTP SaaS registry
# ! Additional parameters injected in corresponding template !
saas_registry:
  serviceOfferingName: saas-registry
  servicePlanName: application
  # Parameters allow us to modify the subscription process 
  # The following setup provides an option to define a custom domain
  parameters:
    appPlans:
      - description: Sustainable SaaS default plan
        name: default
      - description: Sustainable SaaS trial plan
        name: trial
      - description: Sustainable SaaS premium plan
        name: premium
    propagateParams: true
    paramsSchema: 
      schemas:
        subscription:
          create:
            parameters:
              additionalProperties: false
              _show_form_view: true
              type: object
              properties:
                custSubdomain:
                  type: string
                  title: Custom Subdomain
                  description: >-
                    Provide a custom subdomain for this subscription instance. This subdomain will be used instead of the default 
                    <SubaccountSubdomain>-<ReleaseName>-router-<Namespace> pattern. Please make sure to use unique subdomains only! 


# SAP Destination Service 
# Used to centrally store destinations of the SaaS application
destination:
  serviceOfferingName: destination
  servicePlanName: lite
  parameters:
    version: 1.0.0
    HTML5Runtime_enabled: false
    init_data:
      instance:
        existing_destinations_policy: update
        destinations:
          # Backend Destination depends on dynamic Release name
          - Name: srv-api
            Authentication: NoAuthentication
            ProxyType: Internet
            Type: HTTP
            URL: 'http://{{ include "cap.fullname" (merge (dict "name" "srv" "deployment" .Values.srv ) . ) }}:{{ .Values.srv.port }}'
            HTML5.DynamicDestination: true
            HTML5.ForwardAuthToken: true
          # Sample destination currently not used in the project
          - Name: NORTHWIND
            Description: Northwind
            URL: https://services.odata.org/v4/Northwind/Northwind.svc
            Type: HTTP
            ProxyType: Internet
            Authentication: NoAuthentication


# SAP Service Manager ("container" plan)
# Required by mtxs for automated creation of tenant database containers
sm_container:
  serviceOfferingName: service-manager
  servicePlanName: container
  parameters:
    acquireTimeoutMillis: max
    polling_timeout_seconds: 480


# SAP Service Manager ("subaccount-admin" plan)
# Required to create an instance of CIS Service ("central" plan)
sm_admin:
  serviceOfferingName: service-manager
  servicePlanName: subaccount-admin


# SAP HANA Cloud HDI Container
# Required for shared data model deployment
com_hdi_container:
  serviceOfferingName: hana
  servicePlanName: hdi-shared


# SAP HTML5 Application Repository
# Storing the SaaS application UI modules
html5_repo_host:
  serviceOfferingName: html5-apps-repo
  servicePlanName: app-host


# SAP HTML5 Application Repository
# Allows access to the SaaS applicaiton UI modules 
html5_repo_runtime:
  serviceOfferingName: html5-apps-repo
  servicePlanName: app-runtime


# SAP Cloud Identity Service Instance
# Provides an SAP IAS integration for central user management
identity:
  enabled: false # Enable if an SAP IAS instance is configured as Trusted Identity Provider
  serviceOfferingName: identity
  servicePlanName: application
  parameters:
    # Unique display dame as usually only one SAP IAS instance per customer
    display-name: 'Susaas ({{.Release.Name}}-{{.Release.Namespace}}-{{.Values.global.shootName}})'
    oauth2-configuration:
      # Redirect and logout URIs filled with dummy values as not required for authentication
      redirect-uris:
        - 'https://*.{{ include "cap.deploymentHostFull" ( merge ( dict "name" "router" "deployment" .Values.router ) . ) }}/login/callback?authType=ias'
      post-logout-redirect-uris: 
        - 'https://*.{{ include "cap.deploymentHostFull" ( merge ( dict "name" "router" "deployment" .Values.router ) . ) }}/logout/**'
      grant-types: ["authorization_code"]
      credential-types: ["binding-secret", "x509"]
    xsuaa-cross-consumption: false
    multi-tenant: false